model KPI {
  id                     Int     @id @default(autoincrement())
  name                   String
  code                   String
  description            String
  owner                  String
  measurementNumerator   String? @db.VarChar(512)
  measurementDenominator String? @db.VarChar(512)
  measurementNumber      String? @db.VarChar(512)
  resources              String?
  isArchived             Boolean @default(false)
  statusType             String  @default("default")

  unit        Units
  frequency   Frequency
  type        KPIType
  calibration Calibration

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  departmentId Int
  department   Department @relation(fields: [departmentId], references: [id])

  statusId Int?
  status   Status? @relation(fields: [statusId], references: [id])

  KPIObjective  KPIObjective[]
  KPICompliance KPICompliance[]
  KPIProcess    KPIProcess[]
  KPITarget     KPITarget[]
  KPIActual     KPIActual[]
  DashboardKPI  DashboardKPI[]
  tasks         TaskManagement[]
}

model KPITarget {
  id          Int      @id @default(autoincrement())
  year        Int
  period      String
  targetValue Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  kpiId Int
  kpi   KPI @relation(fields: [kpiId], references: [id], onDelete: Cascade)

  @@unique([kpiId, year, period])
}

model KPIActual {
  id          Int      @id @default(autoincrement())
  year        Int
  period      String
  targetValue Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  kpiId Int
  kpi   KPI @relation(fields: [kpiId], references: [id], onDelete: Cascade)

  @@unique([kpiId, year, period])
}

model Dashboard {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  chartType ChartTypes @default(bar)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  dashboardKPIs DashboardKPI[] // Relationship with selected KPIs
  screenshots   Screenshot[]
}

model Objective {
  id   Int    @id @default(autoincrement())
  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  KPIObjective KPIObjective[]
}

model Compliance {
  id   Int    @id @default(autoincrement())
  name String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  KPICompliance KPICompliance[]
}

model Process {
  id   Int    @id @default(autoincrement())
  name String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  KPIProcess KPIProcess[]
}

model Status {
  id   Int    @id @default(autoincrement())
  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Each Status can have many associated rules
  rules Rule[]
  kpis  KPI[]
}

model Rule {
  id    Int    @id @default(autoincrement())
  min   Int
  max   Int
  label String
  color String

  statusId Int
  status   Status @relation(fields: [statusId], references: [id], onDelete: Cascade)
}

model KPIObjective {
  kpiId Int
  kpi   KPI @relation(fields: [kpiId], references: [id], onDelete: Cascade)

  objectiveId Int
  objective   Objective @relation(fields: [objectiveId], references: [id])

  @@id([kpiId, objectiveId])
}

model KPICompliance {
  kpiId Int
  kpi   KPI @relation(fields: [kpiId], references: [id], onDelete: Cascade)

  complianceId Int
  compliance   Compliance @relation(fields: [complianceId], references: [id])

  @@id([kpiId, complianceId])
}

model KPIProcess {
  kpiId Int
  kpi   KPI @relation(fields: [kpiId], references: [id], onDelete: Cascade)

  processId Int
  process   Process @relation(fields: [processId], references: [id])

  @@id([kpiId, processId])
}

model DashboardKPI {
  id Int @id @default(autoincrement())

  dashboardId Int // Foreign key to Dashboard
  dashboard   Dashboard @relation(fields: [dashboardId], references: [id], onDelete: Cascade)

  kpiId Int // Foreign key to KPI
  kpi   KPI @relation(fields: [kpiId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([dashboardId, kpiId]) // Prevent duplicate KPI selections for the same dashboard
}

model Screenshot {
  id Int @id @default(autoincrement())

  image String
  hash  String @unique

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  dashboardId Int // Foreign key to Dashboard
  dashboard   Dashboard @relation(fields: [dashboardId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ChartTypes {
  bar
  line
  pie
  radar
  area
  barStacked
}
