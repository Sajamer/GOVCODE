model User {
  id    String   @id @default(cuid())
  email String   @unique
  role  userRole @default(userDepartment)

  fullName      String?   @db.VarChar(64)
  phone         String?   @db.VarChar(64)
  photo         String?
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  departmentId Int?
  department   Department?  @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  accounts     Account[]
  sessions     Session[]
  Invitation   Invitation[]
  screenShots  Screenshot[]

  assignedTasks  TaskManagement[] @relation(name: "AssignedTask")
  allocatedTasks TaskManagement[] @relation(name: "AllocatedTask")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @map("user_id")
  type                     String
  provider                 String
  providerAccountId        String  @map("provider_account_id")
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Password {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  hash      String
  salt      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("passwords")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  expires      DateTime

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model VerificationToken {
  identifier String   @map("email")
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Invitation {
  id           String   @id @default(cuid())
  email        String   @unique
  fullName     String
  role         userRole @default(userDepartment)
  departmentId Int?
  token        String   @unique // Secure token for invitation link
  status       String   @default("pending") // pending, accepted, or revoked
  expiresAt    DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  invitedByUserId String? // Reference to the user who invited
  invitedBy       User?   @relation(fields: [invitedByUserId], references: [id], onDelete: SetNull)
}
