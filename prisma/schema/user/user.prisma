model User {
  id    String   @id @default(cuid())
  email String   @unique
  role  userRole @default(user)

  fullName      String?   @db.VarChar(64)
  phone         String?   @db.VarChar(64)
  bio           String?   @db.VarChar(500)
  photo         String?
  dateOfBirth   DateTime?
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  departmentId Int?
  department   Department? @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  account      Account[]
  Session      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Password {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  hash      String
  salt      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("passwords")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String   @map("email")
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
