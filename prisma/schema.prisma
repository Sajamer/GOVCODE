generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id    Int      @id @default(autoincrement())
  email String   @unique
  role  userRole @default(user)

  fullName    String?   @db.VarChar(64)
  phone       String?   @db.VarChar(64)
  bio         String?   @db.VarChar(500)
  photo       String?
  dateOfBirth DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  departmentId Int?
  department   Department? @relation(fields: [departmentId], references: [id])
  account      Account[]
}

model Account {
  id                Int      @id @default(autoincrement())
  email             String   @unique
  provider          Provider
  providerAccountId String
  refresh_token     String?
  accessToken       String?
  session_state     String?
  expires_at        Int?

  user User @relation(fields: [email], references: [email], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Organization {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?
  logo        String?
  coverPhoto  String?
  website     String?
  phone       String?
  email       String?
  address     String?
  city        String?
  state       String?
  country     String?
  postalCode  String?
  timezone    String?
  currency    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  departments Department[]
}

model Department {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  organizationId Int
  organization   Organization @relation(fields: [organizationId], references: [id])
  users          User[]
  kpis           KPI[]
}

model KPI {
  id                     Int     @id @default(autoincrement())
  name                   String
  description            String
  owner                  String
  measurementNumerator   String?
  measurementDenominator String?
  measurementNumber      String?
  resources              String?

  unit        Units
  frequency   Frequency
  type        KPIType
  calibration Calibration

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  departmentId Int
  department   Department @relation(fields: [departmentId], references: [id])

  KPIObjective  KPIObjective[]
  KPICompliance KPICompliance[]
  KPIProcess    KPIProcess[]
}

model Objective {
  id   Int    @id @default(autoincrement())
  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  KPIObjective KPIObjective[]
}

model Compliance {
  id   Int    @id @default(autoincrement())
  name String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  KPICompliance KPICompliance[]
}

model Process {
  id   Int    @id @default(autoincrement())
  name String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  KPIProcess KPIProcess[]
}

model KPIObjective {
  kpiId Int
  kpi   KPI @relation(fields: [kpiId], references: [id])

  objectiveId Int
  objective   Objective @relation(fields: [objectiveId], references: [id])

  @@id([kpiId, objectiveId])
}

model KPICompliance {
  kpiId Int
  kpi   KPI @relation(fields: [kpiId], references: [id])

  complianceId Int
  compliance   Compliance @relation(fields: [complianceId], references: [id])

  @@id([kpiId, complianceId])
}

model KPIProcess {
  kpiId Int
  kpi   KPI @relation(fields: [kpiId], references: [id])

  processId Int
  process   Process @relation(fields: [processId], references: [id])

  @@id([kpiId, processId])
}

model Otp {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  otp       String
  expiresAt DateTime
}

enum userRole {
  superAdmin
  moderator
  contributor
  user
}

enum KPIType {
  CUMULATIVE
  STAGING
}

enum Units {
  PERCENTAGE
  NUMBER
  TIME
  DAYS
}

enum Frequency {
  MONTHLY
  QUARTERLY
  SEMI_ANNUALLY
  ANNUALLY
}

enum Calibration {
  INCREASING
  DECREASING
}

enum Provider {
  credential
  google
}
